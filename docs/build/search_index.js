var documenterSearchIndex = {"docs":
[{"location":"#CoTETE.jl-Documentation-1","page":"CoTETE.jl Documentation","title":"CoTETE.jl Documentation","text":"","category":"section"},{"location":"#","page":"CoTETE.jl Documentation","title":"CoTETE.jl Documentation","text":"CurrentModule = CoTETE","category":"page"},{"location":"#","page":"CoTETE.jl Documentation","title":"CoTETE.jl Documentation","text":"calculate_TE_from_event_times","category":"page"},{"location":"#CoTETE.calculate_TE_from_event_times","page":"CoTETE.jl Documentation","title":"CoTETE.calculate_TE_from_event_times","text":"function calculate_TE_from_event_times(\n    target_events::Array{<:AbstractFloat},\n    source_events::Array{<:AbstractFloat},\n    l_x::Integer,\n    l_y::Integer;\n    auto_find_start_and_num_events::Bool = true,\n    start_event::Integer = 1,\n    num_target_events::Integer = length(target_events) - start_event,\n    num_samples_ratio::AbstractFloat = 1.0,\n    k::Integer = 5,\n    conditioning_events::Array{<:AbstractFloat} = [0.0],\n    l_z::Integer = 0,\n    metric::Metric = Euclidean(),\n    is_surrogate::Bool = false,\n    surrogate_num_samples_ratio::AbstractFloat = 1.0,\n    k_perm::Integer = 5,\n    )\n\nEstimates the TE from lists of raw event times.\n\nArguments\n\ntarget_events::Array{<:AbstractFloat}: A list of the raw event times in the target process. Corresponds to X in [1].\nsource_events::Array{<:AbstractFloat}: A list of the raw event times in the source. Corresponds to Y in [1].\nl_x::Integer: The number of intervals in the target process to use in the history embeddings. Corresponds to l_X in [1].\nl_y::Integer: The number of intervals in the source process to use in the history embeddings. Corresponds to l_Y in [1].\nauto_find_start_and_num_events::Bool = true: When set to true, the start event will be set to the first event for which there are sufficient preceding events in all processes such that the embeddings can be constructed. The number of target events will be set such that all time between this first event and the last event is included.\nstart_event::Integer = 1:\nnum_target_events::Integer = length(target_events) - start_event:\nnum_samples_ratio::AbstractFloat = 1.0:\nk::Integer = 5:\nconditioning_events::Array{<:AbstractFloat} = [0.0]:\nl_z::Integer = 0:\nmetric::Metric = Euclidean():\nis_surrogate::Bool = false:\nsurrogate_num_samples_ratio::AbstractFloat = 1.0:\nk_perm::Integer = 5:\n\nwarning: warning on using auto_find_start_and_num_events\n\n\n[1] Estimating Transfer Entropy in Continuous Time Between Neural Spike Trains or Other Event-Based Data David Shorten, Richard Spinney, Joseph Lizier bioRxiv 2020.06.16.154377; doi: https://doi.org/10.1101/2020.06.16.154377\n\n\n\n\n\n","category":"function"}]
}
